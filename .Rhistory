means <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
means
library(USingR)
install.packages("UsingR")
library(USingR)
library(UsingR)
data(father.son)
x <- father.son$shight
x <- father.son$sheight
(mean(x) + c(1,-1) * qnorm(.975) * sd(x)/sqrt(length(x)))
(mean(x) + c(1,-1) * qnorm(.975) * sd(x)/sqrt(length(x)))/12
h <- (mean(x) + c(1,-1) * qnorm(.975) * sd(x)/sqrt(length(x)))/12
h
0.56 + c(1, -1) + qnorm(.975) * sqrt (.56*.44/100)
0.56 + c(1, -1) * qnorm(.975) * sqrt (.56*.44/100)
binom.test(56, 100)$conf.int
bye
n <- 20
pvals <- seq(0.1, 0.9, by = -.-5)
pvals <- seq(0.1, 0.9, by = -.05)
pvals <- seq(0.1, 0.9, by = .05)
nosim <- 1000
coverage <- sapply(pvals, function(p) { phats <- rbinom(nosim, prob = p, size=n) ll<- phats - qnorm(.975) * sqrt(phats* (1-phats)/n)  ul <- phats + qnorm(.975) * sqrt (phats * (1-phats)/n )  mean <- (ll < p & ul > p ) })
n <- 20
coverage <- sapply(pvals, function(p) { phats <- rbinom(nosim, prob = p, size=n) ll<- phats - qnorm(.975) * sqrt(phats* (1-phats)/n)  ul <- phats + qnorm(.975) * sqrt (phats * (1-phats)/n )  mean <- (ll < p & ul > p ) })
n <- 20
pvals <- seq(0.1, 0.9, by = .05)
nosim <- 1000
coverage <- sapply(pvals, function(p) {
phats <- rbinom(nosim, prob = p, size=n)
ll<- phats - qnorm(.975) * sqrt(phats* (1-phats)/n)
ul <- phats + qnorm(.975) * sqrt (phats * (1-phats)/n )
means <- (ll < p & ul > p ) })
coverage
plot (coverage)
histogram (coverage)
histogram (coverage)
boxplot (coverage)
ggplot (coverage)
x <-5
x <- 5
lambda <- x/t
t <- 94.32
lambda <- x/t
round (lambda + c(1, -1) * qnorm(.975 * sqrt (lambda/t))/3)
round (lambda + c(1, -1) * qnorm(.975) * sqrt (lambda/t))/3)
round (lambda + c(1, -1) * qnorm(.975) * sqrt (lambda/t)/3)
round (lambda + c(1, -1) * qnorm(.975) * sqrt (lambda/t),3)
poission.test(x, T=94.32)$conf
poisson.test(x, T=94.32)$conf
data(sleep)
head(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
mn + c(-1,1) * qt(.975, n-1 ) * s / sqrt (n)
t.test(difference)
t.test(g2, g1, paired=TRUE)
t.test(extra ~ I(relevel(group,2 )), paired=TRUE, data=SLEEP)
t.test(extra ~ I(relevel(group,2 )), paired=TRUE, data=sleep)
mu0=30
mua=32
sigma=4
n=16
z <- qnorm(1-alpha)
z <- qnorm(1 - alpha)
pnorm(mu0 + z* sigma/sqrt(n), mean= mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + .95* sigma/sqrt(n), mean= mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + .05* sigma/sqrt(n), mean= mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + .975* sigma/sqrt(n), mean= mua, sd = sigma/sqrt(n), lower.tail = FALSE)
library(manipulate)
z <- qnorm(1 - alpha)
install.packages("HMP")
library(HMP)
z <- qnorm(1 - alpha)
z <- qnorm(1 - alpha)
library(scales)
install.packages("scales")
library(scales)
z <- qnorm(1 - alpha)
z <- qnorm(1 - alpha())
z <- qnorm(1 - alpha(abc))
z <- qnorm(1 - alpha)
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
B <- 10000
resamples <- matrix(sample(x, n*B, replace= TRUE), B, n)
resampledMedians <- apply (resamples, 1, median)
resampledMedians
n
resamples
sd(resampledMedians)
g = ggplot (data.frame(medians = resampledMedians), aes(x=medians))
library(ggplot2)
library("ggplot2")
install("ggplot2")
install.packages("ggplot2")
library("ggplot2")
g = ggplot (data.frame(medians = resampledMedians), aes(x=medians))
g = g + geom_histogram(color="black", fill="lightblue", binwidth=0.05)
g
a <- c(140, 138, 150, 148, 135)
b <- c(132, 135, 151, 146, 130)
data.frame(a, b)
x<- data.frame(a, b)
xmean <- apply (x, 1, median)
xmean
ggplot (data.frame(medians = xmean), aes(x=xmean))
ggplot (medians = xmean, aes(x=xmean)
ggplot (medians = xmean, aes(x=median)
ggplot (medians = xmean, aes(x=median)
gt = ggplot (medians = xmean, aes(x=median)
gt = ggplot (medians = xmean, aes(x=median)
gt = ggplot data.frame(medians = xmean), aes(x=medians)
gt = ggplot (data.frame(medians = xmean), aes(x=medians) )
gt = gt + geom_histogram(color="black", fill="lightblue", binwidth=0.05)
gt
install.packages("swirl")
library("swirl")
library("swirl")
install_from_swirl("Statistical Inference")
swirl()
sigma <- 4; mu_0 = 30; mu_a = 34; n <- 16; alpha = .05
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
qnorm(.95)
z <- qnorm(.95)
x <- -5 : 5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54,
3.87, 4.97)
knotPoint <- c(0)
spline <- sapply(knotPoint, function(knot) (x > knot) * (x - knot))
xMatrix <- cbind(1, x, spline)
fit <- lm(y ~ xMatrix - 1)
yhat <- predict(fit)
yhat
slope <- fit$coef[2] + fit$coef[3]
install.packages("swirl")
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
library(caret)
install.packages("caret")
library(caret)
library(kernlab)
data(spam)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createdatapartisian(y=spam$type, p=.75, list = FALSE)
inTrain <- createdatapartition(y=spam$type, p=.75, list = FALSE)
inTrain <- createDataPartition(y=spam$type, p=.75, list = FALSE)
training <- spam(inTrain)
training <- spam[inTrain]
testing <- spam[-intrain]
testing <- spam[-inTrain]
testing
spam
dim(training)
dim(testing)
training
modelFit <- train(type ~., data = training, method="glm")
modelFit <- train(type~., data=training, method="glm")
modelFit <- train(type ~., data=training, method="glm")
training <- spam[inTrain]
training
dim(training)
dim(testing)
modelFit <- train(type ~, data=training, method="glm")
modelFit <- train(type ~. , data=training, method="glm")
testing$type
sample(spam)
inTrain <- createDataPartition(y=spam$type, p=.75, list = FALSE)
training <- spam[inTrain]
testing <- spam[-inTrain]
modelFit <- train(type ~. , data=training, method="glm")
set.seed(32323)
folds <- createFolds(y=spam$type, k=10, list = TRUE, returnTrain = TRUE)
sapply(folds, length)
folds[[1][1:10]]
folds[[1]][1:10]
time <- 1:1000
foldstime <- createTimeslices(y=time, initialWindow=20, horizon = 10 )
foldstime <- createTimeSlices(y=time, initialWindow=20, horizon = 10 )
names(foldstime)
foldstime$train[1]
foldstime$train[3]
foldstime$train[6]
foldstime$test[4]
args(TrainControl)
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(ggplot2)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=.7, list = FALSE)
training <- Wage(inTrain)
training <- Wage(inTrain,)
training <- Wage(inTrain,)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age", 'education', "jobclass")], y=training$wage, plots="pairs")
featurePlot(x=training[,c("age", 'education', "jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, date=trainingtraining)
qplot(age, wage, data=training)
qplot(age, wage, colour=jobclass data=training)
qplot(age, wage, color=jobclass data=training)
qplot(age, wage, colour=jobclass, data=training)
qplot(age, wage, colour=education, data=training)
qq <- qplot(age, wage, colour=education, data=training)
qq + geom_smooth (method="lm", formula=y~x)
q1 <- qplot(age, wage, colour=jobclass, data=training)
q2 + geom_smooth (method="lm", formula=y~x)
q1 + geom_smooth (method="lm", formula=y~x)
qplot(age, wage, colour=race, data=training)
q2 <- qplot(age, wage, colour=race, data=training)
q2 + geom_smooth (method="lm", formula=y~x)
install.packages("Hmisc")
library(Hmisc)
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
p1 <- qplot(cutWage, age, data= training, fill=cutWage, geom=c("boxplot"))
p1
p2 <- qplot(cutWage, education, data= training, fill=cutWage, geom=c("boxplot"))
p2
p3 <- qplot(cutWage, age, data= training, fill=cutWage, geom=c("boxplot", "jitter"))
grid.arrange(p1, p3, ncol=1)
p3
p1
p3
t1  <- table(cutWage, training$jobclass)
t1
t2  <- table(cutWage, training$education)
t2
t3  <- table(cutWage, training$race)
t3
prop.table(t1, 1)
prop.table(t1, 2)
prop.table(t3, 1)
qplot(wage, colour=education, data= training, geom="density")
training1 <- spam[inTrain,]
testing1 <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="Ave. capital run length")
hist(training1$capitalAve, main="", xlab="Ave. capital run length")
hist(training1$capitalAve, main="", xlab="Ave. capital run length")
mean(training$capitalAve)
mean(training1$capitalAve)
sd(training1$capitalAve)
TrainCapAve <- training$capitalAve
TrainCapAveS <- (TrainCapAve - mean(TrainCapAve))/sd(TrainCapAve)
TrainCapAve
TrainCapAveS
TrainCapAve <- training1$capitalAve
TrainCapAveS <- (TrainCapAve - mean(TrainCapAve))/sd(TrainCapAve)
TrainCapAve
TrainCapAveS
mean(TrainCapAveS)
sd(TrainCapAveS)
TestCapAve <- testing1$capitalAve
TestCapAveS <- (TestCapAve - mean(TrainCapAve))/sd(TrainCapAve)
mean(TestCapAveS)
sd(TestCapAveS)
preObj <- preProcess(training[,-58], method=c("center", "scale"), )
preObj <- preProcess(training[,-58], method=c("center", "scale"))
preObj <- preProcess(training1[,-58], method=c("center", "scale"))
TrainCapAveS1 <- predict(preObj, training1[,-58])$capitalAve
mean(TrainCapAveS1)
sd(TrainCapAveS1)
TestCapAveS1 <- predict(preObj, testing1[,-58])$capitalAve
mean(TestCapAveS1)
sd(TestCapAveS1)
preObj1 <- preProcess(training1[,-58], method=c("boxcox"))
preObj1 <- preProcess(training1[,-58], method=c("BoxCox"))
install.packages("e1071")
preObj1 <- preProcess(training1[,-58], method=c("BoxCox"))
TrainCapAveS1 <- predict(preObj1, training1[,-58])$capitalAve
hist(TrainCapAveS1);
qqnorm(TrainCapAveS1);
qqnorm(TrainCapAveS1);
rbinom(dim(training)[1], size=1, prob=.05)==1
rbinom(dim(training1)[1], size=1, prob=.05)==1
training1$CapAve <-  training1$capitalAve
selectNA <- rbinom(dim(training1)[1], size=1, prob=.05)==1
training1$CapAve[selectNA] <- NA
training1$CapAve
training1$capitalAve
CapAve <- predict(preObj2, training[,58]$CapAve)
preObj2 <- preProcess(training1[,-58], method=c("KnnImpute"))
preProcess(training1[,-58], method=c("KnnImpute"))
preObj2 <- preProcess(training1[,-58], method=c("knnImpute"))
CapAve <- predict(preObj2, training[,58]$CapAve)
CapAve <- predict(preObj2, training1[,58]$CapAve)
CapAve <- predict(preObj2, training1[,58])$CapAve
CapAve <- predict(preObj2, training1[,-58])$CapAve
install.packages("RNN")
library(RNN)
install.packages("RNN")
CapAve <- predict(preObj2, training1[,-58])$CapAve
install.packages("RANN")
library(RANN)
CapAve <- predict(preObj2, training1[,-58])$CapAve
CapAve
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data = training)
head(predict(dummies, newdata=training))
nsv <- nearZeroVar (training, saveMetrics=TRUE)
nsv
M <- abs (cor(training[,-58]))
M <- abs (cor(training1[,-58]))
diag(M) <- 0
which(M > .8 , arr.Ind=T)
M
hich(M > .8 , arr.Ind=T)
which(M > .8 , arr.Ind=T)
which(M > .8 , arr.ind=T)
plot(spam[,34], spam[,32])
plot(spam[,41], spam[,46])
plot(spam[,34], spam[,40])
plot(spam[,32], spam[,40])
x <- training1$cs + training1$edu + training1$direct + training1$num415 + training1$num857
Y <- training1$cs - training1$edu - training1$direct + training1$num415 - training1$num857
plot(X,Y)
plot(x,Y)
Y <-  (training1$cs +1 ) * (training1$edu +1 ) * (training1$direct +1 )* (training1$num415 +1 )*( training1$num857 +1)
plot(x,Y)
SmallSpam <- spam[,c(32, 34, 40, 41, 46)]
prComp <- prcomp(SmallSpam)
prComp
plot(prComp$x[,1], prComp$x[,1])
plot(prComp$x[,1], prComp$x[,2])
plot(prComp$x[,1], prComp$x[,3])
plot(prComp$x[,1], prComp$x[,4])
plot(prComp$x[,1], prComp$x[,5])
prComp$rotation
plot(prComp$x[,2], prComp$x[,3])
plot(prComp$x[,2], prComp$x[,5])
plot(prComp$x[,2], prComp$x[,4])
plot(prComp$x[,3], prComp$x[,4])
plot(prComp$x[,5], prComp$x[,4])
plot(prComp$x[,5], prComp$x[,3])
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=.5, list = FALSE)
training5 <- faithful[inTrain,]
testing5 <- faithful[-inTrain,]
head(training5)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
plot(trainFaith$waiting, trainFaith$eruptions,pch=19, col="blue")
lm1 <- km(eruptions ~ waiting, newdata=trainFaith)
lm1 <- lm(eruptions ~ waiting, newdata=trainFaith)
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
lm1
lines(trainFaith$waiting, lm1$fitted, lwd=3)
lm1$fitted
coef(lm1)[1] + coef(lm2)[2]*80
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict (lm1, newdata)
plot(testFaith$waiting, testFaith$eruptions,pch=19, col="blue", )
lines(testFaith$waiting, lm1$fitted, lwd=3)
lines(testFaith$waiting, predict(lm1,newedata=testFaith, lwd=3)
plot(testFaith$waiting, testFaith$eruptions,pch=19, col="blue", )
plot(testFaith$waiting, testFaith$eruptions,pch=19, col="blue", )
lines(testFaith$waiting, predict(lm1,newedata=testFaith), lwd=3)
sqrt(sum((lm1$fitted - trainFaith$eruptions)^2))
sqrt(sum((lm1$fitted - testFaith$eruptions)^2))
testFaith <- faithful[-inTrain,]
sqrt(sum((lm1$fitted - testFaith$eruptions)^2))
sqrt(sum((predict(lm1, newdata=testFaith) - testFaith$eruptions)^2))
pred1 <- predict(lm1, newdata=testFaith, interval = "prediction")
ord <- order(testFaith$waiting)
ord
pred1
matlines(testFaith$waiting[ord], pred1[ord], type="l" , col=c(1,2,2), lty=c(1,1,1), lwd=3 )
plot(testFaith$waiting, testFaith$eruptions, col="blue", pch=19)
matlines(testFaith$waiting[ord], pred1[ord], type="l" , col=c(1,2,2), lty=c(1,1,1), lwd=3 )
modFit <- train(eruptions ~ waiting, data = trainFaith, method= "lm")
summary(modFit$finalModel)
predict(modFit, newdata=testFaith)
predict(modFit, newdata=testFaith$waiting)
plot ( testFaith$waiting, predict(modFit, newdata=testFaith ), col="blue")
plot ( testFaith$eruptions, predict(modFit, newdata=testFaith ), col="blue")
plot ( testFaith$waiting, predict(modFit, newdata=testFaith ), col="blue")
ModFit <- train(wage ~ age + jobclass + education , method ="lm", data=training)
finMod <- modFit$finalModel
ModFit <- train(wage ~ age + jobclass + education , method ="lm", data=training)
finMod <- modFit$finalModel
finMod
print(modFit)
plot(finMod, 1, pch=19, cex=0.5, col="#000000010")
plot(finMod, 1, pch=19, cex=0.5, col="#00000010")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
M <- abs (cor(training[,-10]))
M <- abs (cor(training[,-8]))
diag(M) <- 0
which(M > .8 , arr.ind=T)
M <- abs (cor(training[,-9]))
diag(M) <- 0
which(M > .8 , arr.ind=T)
which(M > .5 , arr.ind=T)
M <- abs (cor(training[,-9]))
diag(M) <- 0
which(M > .5 , arr.ind=T)
which(M > .2 , arr.ind=T)
which(M > .6 , arr.ind=T)
plot(training$CompressiveStrength ~ water)
plot(training$CompressiveStrength ~ water)
plot(training$CompressiveStrength ~ training$water)
plot(training$CompressiveStrength , training$water, col="blue", pch=19)
which(M > .6 , arr.ind=T)
plot(training$CompressiveStrength , training$superplasticizer, col="blue", pch=19)
which(M > .6 , arr.ind=T)
plot(training[,5], training[,4])
q2 <- qplot(water, CompressiveStrength, colour="blue", data=training)
q2
training = mixtures[ inTrain,]
q2 <- qplot(water, CompressiveStrength, colour="blue", data=training)
q2
q2 <- qplot(superplasticizer, CompressiveStrength, colour="blue", data=training)
q2
q2 <- qplot(age, CompressiveStrength, colour="blue", data=training)
q2
cutWage <- cut2(training$CompressiveStrength, g=4)
cutStr <- cut2(training$CompressiveStrength, g=4)
table(Str)
table(cutStr)
p1 <- qplot(cutStr, age, data= training, fill=cutStr, geom=c("boxplot"))
p1
p1 <- qplot(cutStr, Water, data= training, fill=cutStr, geom=c("boxplot"))
p1
p1 <- qplot(cutStr, superplasticizer, data= training, fill=cutStr, geom=c("boxplot"))
p2 <- qplot(cutStr, superplasticizer, data= training, fill=cutStr, geom=c("boxplot"))
p2
p2 <- qplot(cutStr, Superplasticizer, data= training, fill=cutStr, geom=c("boxplot"))
p2
hist(training$Superplasticizer, main="", xlab="Sup  run length")
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(training$CompressiveStrength , training$FlyAsh, col="blue", pch=19)
plot(training$CompressiveStrength , training$FlyAsh, col="blue", pch=19)
datasets(wage)
data(Wage)
data(Wage)
library("ISLR"); library("ggplot2"); library("caret")
data(Wage)
summary(Wage)
diabetesRisk <- function(glucose) glucose/200
setwd("U:/Data Science/Data products/MyShinyProject")
deployApp()
setwd("U:/Data Science/Data products/MyShinyProject")
library(shinyapps)
deployApp()
deployApp()
library("slidify")
author("Sreekanth")
slidify(index.RMD)
slidify(index.Rmd)
slidify(index.Rmd)
library(knitter)
library(kniter)
library("knitr", lib.loc="C:/Program Files/R/R-3.1.0/library")
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
git
git init
summary(mtcars)
getwd()
file.edit('~/.Rprofile')
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
library(knitr)
